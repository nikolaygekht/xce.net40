using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace gehtsoft.intellisense.vbscript
{
    internal partial class TypeFactory
    {
        public static VbKeywordCollection CreateKeywords(string types)
        {
            VbKeywordCollection coll = new VbKeywordCollection();
            if (types.Contains("standart"))
            {
               coll.Add(new VbKeyword("vbBlack"));
               coll.Add(new VbKeyword("vbRed"));
               coll.Add(new VbKeyword("vbGreen"));
               coll.Add(new VbKeyword("vbYellow"));
               coll.Add(new VbKeyword("vbBlue"));
               coll.Add(new VbKeyword("vbMagenta"));
               coll.Add(new VbKeyword("vbCyan"));
               coll.Add(new VbKeyword("vbWhite"));
               coll.Add(new VbKeyword("vbBinaryCompare"));
               coll.Add(new VbKeyword("vbTextCompare"));
               coll.Add(new VbKeyword("vbSunday"));
               coll.Add(new VbKeyword("vbMonday"));
               coll.Add(new VbKeyword("vbTuesday"));
               coll.Add(new VbKeyword("vbWednesday"));
               coll.Add(new VbKeyword("vbThursday"));
               coll.Add(new VbKeyword("vbFriday"));
               coll.Add(new VbKeyword("vbSaturday"));
               coll.Add(new VbKeyword("vbUseSystemDayOfWeek"));
               coll.Add(new VbKeyword("vbFirstJan1"));
               coll.Add(new VbKeyword("vbFirstFourDays"));
               coll.Add(new VbKeyword("vbFirstFullWeek"));
               coll.Add(new VbKeyword("vbGeneralDate"));
               coll.Add(new VbKeyword("vbLongDate"));
               coll.Add(new VbKeyword("vbShortDate"));
               coll.Add(new VbKeyword("vbLongTime"));
               coll.Add(new VbKeyword("vbShortTime"));
               coll.Add(new VbKeyword("vbObjectError"));
               coll.Add(new VbKeyword("vbOKOnly"));
               coll.Add(new VbKeyword("vbOKCancel"));
               coll.Add(new VbKeyword("vbAbortRetryIgnore"));
               coll.Add(new VbKeyword("vbYesNoCancel"));
               coll.Add(new VbKeyword("vbYesNo"));
               coll.Add(new VbKeyword("vbRetryCancel"));
               coll.Add(new VbKeyword("vbCritical"));
               coll.Add(new VbKeyword("vbQuestion"));
               coll.Add(new VbKeyword("vbExclamation"));
               coll.Add(new VbKeyword("vbInformation"));
               coll.Add(new VbKeyword("vbDefaultButton1"));
               coll.Add(new VbKeyword("vbDefaultButton2"));
               coll.Add(new VbKeyword("vbDefaultButton3"));
               coll.Add(new VbKeyword("vbDefaultButton4"));
               coll.Add(new VbKeyword("vbApplicationModal"));
               coll.Add(new VbKeyword("vbSystemModal"));
               coll.Add(new VbKeyword("vbCr"));
               coll.Add(new VbKeyword("vbCrLf"));
               coll.Add(new VbKeyword("vbFormFeed"));
               coll.Add(new VbKeyword("vbLf"));
               coll.Add(new VbKeyword("vbNewLine"));
               coll.Add(new VbKeyword("vbNullChar"));
               coll.Add(new VbKeyword("vbNullString"));
               coll.Add(new VbKeyword("vbTab"));
               coll.Add(new VbKeyword("vbVerticalTab"));
               coll.Add(new VbKeyword("vbUseDefault"));
               coll.Add(new VbKeyword("vbTrue"));
               coll.Add(new VbKeyword("vbFals"));
               coll.Add(new VbKeyword("vbEmpty"));
               coll.Add(new VbKeyword("vbNull"));
               coll.Add(new VbKeyword("vbInteger"));
               coll.Add(new VbKeyword("vbLong"));
               coll.Add(new VbKeyword("vbSingle"));
               coll.Add(new VbKeyword("vbDouble"));
               coll.Add(new VbKeyword("vbCurrency"));
               coll.Add(new VbKeyword("vbDate"));
               coll.Add(new VbKeyword("vbString"));
               coll.Add(new VbKeyword("vbObject"));
               coll.Add(new VbKeyword("vbError"));
               coll.Add(new VbKeyword("vbBoolean"));
               coll.Add(new VbKeyword("vbVariant"));
               coll.Add(new VbKeyword("vbDataObject"));
               coll.Add(new VbKeyword("vbDecimal"));
               coll.Add(new VbKeyword("vbByte"));
               coll.Add(new VbKeyword("vbArray"));
               coll.Add(new VbKeyword("Empty"));
               coll.Add(new VbKeyword("False"));
               coll.Add(new VbKeyword("Nothing"));
               coll.Add(new VbKeyword("Null"));
               coll.Add(new VbKeyword("True"));
               coll.Add(new VbKeyword("Err"));
               coll.Add(new VbKeyword("WScript"));
               coll.Add(new VbKeyword("Err", true));
               coll.Add(new VbKeyword("WScript", true));
               coll.Add(new VbKeyword("Call", true));
               coll.Add(new VbKeyword("Class", true));
               coll.Add(new VbKeyword("Const", true));
               coll.Add(new VbKeyword("Dim", true));
               coll.Add(new VbKeyword("Do", true));
               coll.Add(new VbKeyword("Until", "Do"));
               coll.Add(new VbKeyword("Loop", false, "Do While", "Do Until"));
               coll.Add(new VbKeyword("For", true));
               coll.Add(new VbKeyword("Each", "For"));
               coll.Add(new VbKeyword("Next", false, "For", "For Each"));
               coll.Add(new VbKeyword("While", true));
               coll.Add(new VbKeyword("Wend", false, "While"));
               coll.Add(new VbKeyword("If", true));
               coll.Add(new VbKeyword("Erase", true));
               coll.Add(new VbKeyword("Execute", true));
               coll.Add(new VbKeyword("ExecuteGlobal", true));
               coll.Add(new VbKeyword("Exit", true, "Do While", "Do Until", "Function", "Sub", "Property", "For", "For Each"));
               coll.Add(new VbKeyword("Do", "Exit", true, "Do While", "Do Until"));
               coll.Add(new VbKeyword("For", "Exit", true, "For", "For Each"));
               coll.Add(new VbKeyword("Function", "Exit", true, "Function"));
               coll.Add(new VbKeyword("Sub", "Exit", true, "Sub"));
               coll.Add(new VbKeyword("Property", "Exit", true, "Property"));
               coll.Add(new VbKeyword("Public", false, "Class"));
               coll.Add(new VbKeyword("Private", false, "Class"));
               coll.Add(new VbKeyword("Function", true));
               coll.Add(new VbKeyword("Function", "Public"));
               coll.Add(new VbKeyword("Function", "Private"));
               coll.Add(new VbKeyword("Sub", true));
               coll.Add(new VbKeyword("Sub", "Public"));
               coll.Add(new VbKeyword("Sub", "Private"));
               coll.Add(new VbKeyword("Property", true));
               coll.Add(new VbKeyword("Property", "Public"));
               coll.Add(new VbKeyword("Property", "Private"));
               coll.Add(new VbKeyword("Get", "Property"));
               coll.Add(new VbKeyword("Let", "Property"));
               coll.Add(new VbKeyword("Set", "Property"));
               coll.Add(new VbKeyword("Randomize", true));
               coll.Add(new VbKeyword("ReDim", true));
               coll.Add(new VbKeyword("Rem", true));
               coll.Add(new VbKeyword("Select", true));
               coll.Add(new VbKeyword("Case", false, "Select Case"));
               coll.Add(new VbKeyword("Case", "Select"));
               coll.Add(new VbKeyword("End", false, "Sub", "Function", "Property", "If", "Select Case", "With"));
               coll.Add(new VbKeyword("Sub", "End", false, "Sub"));
               coll.Add(new VbKeyword("Function", "End", false, "Function"));
               coll.Add(new VbKeyword("Property", "End", false, "Property"));
               coll.Add(new VbKeyword("If", "End", false, "If"));
               coll.Add(new VbKeyword("Else", false, "If"));
               coll.Add(new VbKeyword("Select", "End", false, "Select Case"));
               coll.Add(new VbKeyword("With", "End", false, "With"));
               coll.Add(new VbKeyword("Set", true));
               coll.Add(new VbKeyword("Stop", true));
               coll.Add(new VbKeyword("On", true));
               coll.Add(new VbKeyword("Error", "On"));
               coll.Add(new VbKeyword("Resume", "Error"));
               coll.Add(new VbKeyword("Next", "Resume"));
               coll.Add(new VbKeyword("GoTo", "Error"));
               coll.Add(new VbKeyword("Option", true));
               coll.Add(new VbKeyword("Explicit", "Option"));
            }
            return coll;
        }

        public static VbPropertyDictionary CreateProperties(string types)
        {
            VbPropertyDictionary coll = new VbPropertyDictionary();
            if (types.Contains("standart"))
            {
                coll.Add(new VbProperty(null, "Abs", "(number)"));
                coll.Add(new VbProperty(null, "Array", "(arglist)"));
                coll.Add(new VbProperty(null, "Asc", "(string)"));
                coll.Add(new VbProperty(null, "Atn", "(number)"));
                coll.Add(new VbProperty(null, "CBool", "(value)"));
                coll.Add(new VbProperty(null, "CByte", "(value)"));
                coll.Add(new VbProperty(null, "CCur", "(value)"));
                coll.Add(new VbProperty(null, "CDate", "(value)"));
                coll.Add(new VbProperty(null, "CDbl", "(value)"));
                coll.Add(new VbProperty(null, "Chr", "(number)"));
                coll.Add(new VbProperty(null, "CInt", "(value)"));
                coll.Add(new VbProperty(null, "CLng", "(value)"));
                coll.Add(new VbProperty(null, "CStr", "(value)"));
                coll.Add(new VbProperty(null, "CSng", "(value)"));
                coll.Add(new VbProperty(null, "Cos", "(number)"));
                coll.Add(new VbProperty(null, "CreateObject", "(name, [,location])"));
                coll.Add(new VbProperty(null, "DateAdd", "(interval, number, date)"));
                coll.Add(new VbProperty(null, "DateDiff", "(interval, date1, date2[, firstDayOfWeek [, firstWeekOfYear]])"));
                coll.Add(new VbProperty(null, "DatePart", "(interval, date, [, firstDayOfWeek [, firstWeekOfYear]])"));
                coll.Add(new VbProperty(null, "DateSerial", "(year, month, day)"));
                coll.Add(new VbProperty(null, "DateValue", "(variant)"));
                coll.Add(new VbProperty(null, "Day", "(date)"));
                coll.Add(new VbProperty(null, "Escape", "(string)"));
                coll.Add(new VbProperty(null, "Eval", "(string-expression)"));
                coll.Add(new VbProperty(null, "Exp", "(number)"));
                coll.Add(new VbProperty(null, "Filter", "(string-array, value[, include[, compare]])"));
                coll.Add(new VbProperty(null, "FormatCurrency", "(value[, numDigitsAfterDecimal[, includeLeadingDigit[, useParensForNegativeNumbers[, groupDigits]]]])"));
                coll.Add(new VbProperty(null, "FormatDateTime", "(date[, format]"));
                coll.Add(new VbProperty(null, "FormatNumber", "(value[, numDigitsAfterDecimal[, includeLeadingDigit[, useParensForNegativeNumbers[, groupDigits]]]])"));
                coll.Add(new VbProperty(null, "FormatPercent", "(value[, numDigitsAfterDecimal[, includeLeadingDigit[, useParensForNegativeNumbers[, groupDigits]]]])"));
                coll.Add(new VbProperty(null, "GetLocale", "()"));
                coll.Add(new VbProperty(null, "GetObject", "(string-path[, class])"));
                coll.Add(new VbProperty(null, "GetRef", "(procedure-name)"));
                coll.Add(new VbProperty(null, "Hex", "(number)"));
                coll.Add(new VbProperty(null, "Hour", "(time)"));
                coll.Add(new VbProperty(null, "InStr", "([start, ]string1, string2[, compare])"));
                coll.Add(new VbProperty(null, "Now"));
                coll.Add(new VbProperty(null, "Time"));
                coll.Add(new VbProperty(null, "Timer"));
                coll.Add(new VbProperty(null, "InStr", "([start, ]string1, string2[, compare])"));
                coll.Add(new VbProperty(null, "InStrRev", "(string1, string2[, start[, compare]])"));
                coll.Add(new VbProperty(null, "Int", "(number)"));
                coll.Add(new VbProperty(null, "Fix", "(number)"));
                coll.Add(new VbProperty(null, "IsArray", "(varname)"));
                coll.Add(new VbProperty(null, "IsDate", "(expression)"));
                coll.Add(new VbProperty(null, "IsEmpty", "(expression)"));
                coll.Add(new VbProperty(null, "IsNull", "(expression)"));
                coll.Add(new VbProperty(null, "IsNumeric", "(expression)"));
                coll.Add(new VbProperty(null, "IsObject", "(expression)"));
                coll.Add(new VbProperty(null, "Join", "(list[, delimiter])"));
                coll.Add(new VbProperty(null, "LBound", "(arrayname[, dimension])"));
                coll.Add(new VbProperty(null, "LCase", "(string)"));
                coll.Add(new VbProperty(null, "Left", "(string, length)"));
                coll.Add(new VbProperty(null, "Len", "(string | varname)"));
                coll.Add(new VbProperty(null, "LoadPicture", "(picturename)"));
                coll.Add(new VbProperty(null, "Log", "(number)"));
                coll.Add(new VbProperty(null, "LTrim", "(string)"));
                coll.Add(new VbProperty(null, "RTrim", "(string)"));
                coll.Add(new VbProperty(null, "Trim", "(string)"));
                coll.Add(new VbProperty(null, "Mid", "(string, start[, length])"));
                coll.Add(new VbProperty(null, "Minute", "(time)"));
                coll.Add(new VbProperty(null, "Month", "(date)"));
                coll.Add(new VbProperty(null, "MonthName", "(month[, abbreviate])"));
                coll.Add(new VbProperty(null, "MsgBox", "(prompt[, buttons][, title][, helpfile, context])"));
                coll.Add(new VbProperty(null, "Oct", "(number)"));
                coll.Add(new VbProperty(null, "Replace", "(expression, find, replacewith[, start[, count[, compare]]])"));
                coll.Add(new VbProperty(null, "RGB", "(red, green, blue)"));
                coll.Add(new VbProperty(null, "Right", "(string, length)"));
                coll.Add(new VbProperty(null, "Rnd", "([number])"));
                coll.Add(new VbProperty(null, "Round", "(expression[, numdecimalplaces])"));
                coll.Add(new VbProperty(null, "Second", "(time)"));
                coll.Add(new VbProperty(null, "SetLocale", "(lcid)"));
                coll.Add(new VbProperty(null, "Sgn", "(number)"));
                coll.Add(new VbProperty(null, "Sin", "(number)"));
                coll.Add(new VbProperty(null, "Space", "(number)"));
                coll.Add(new VbProperty(null, "Split", "(string[, delimiter[, count[, compare]]])"));
                coll.Add(new VbProperty(null, "Sqr", "(number)"));
                coll.Add(new VbProperty(null, "StrComp", "(string1, string2[, compare])"));
                coll.Add(new VbProperty(null, "String", "(number, character)"));
                coll.Add(new VbProperty(null, "StrReverse", "(string1)"));
                coll.Add(new VbProperty(null, "Tan", "(number)"));
                coll.Add(new VbProperty(null, "TimeSerial", "(hour, minute, second)"));
                coll.Add(new VbProperty(null, "TimeValue", "(time)"));
                coll.Add(new VbProperty(null, "TypeName", "(varname)"));
                coll.Add(new VbProperty(null, "UBound", "(arrayname[, dimension])"));
                coll.Add(new VbProperty(null, "UCase", "(string)"));
                coll.Add(new VbProperty(null, "Unescape", "(charString)"));
                coll.Add(new VbProperty(null, "VarType", "(varname)"));
                coll.Add(new VbProperty(null, "Weekday", "(date, [firstdayofweek])"));
                coll.Add(new VbProperty(null, "WeekdayName", "(weekday, abbreviate, firstdayofweek)"));
                coll.Add(new VbProperty(null, "Year", "(date)"));

                coll.Add(new VbProperty("WScript", "Arguments"));
                coll.Add(new VbProperty("WScript", "FullName"));
                coll.Add(new VbProperty("WScript", "Interactive"));
                coll.Add(new VbProperty("WScript", "Name"));
                coll.Add(new VbProperty("WScript", "Path"));
                coll.Add(new VbProperty("WScript", "ScriptName"));
                coll.Add(new VbProperty("WScript", "Version"));


                coll.Add(new VbProperty("WScript", "Echo", "(...)"));
                coll.Add(new VbProperty("WScript", "ConnectObject", "(object, prefix)"));
                coll.Add(new VbProperty("WScript", "CreateObject", "(progid, prefix)"));
                coll.Add(new VbProperty("WScript", "DisconnectObject", "(object)"));
                coll.Add(new VbProperty("WScript", "GetObject", "(path[, progid][, prefix])"));
                coll.Add(new VbProperty("WScript", "Exit", "(errorcode)"));
                coll.Add(new VbProperty("WScript", "Sleep", "(timeMilliseconds)"));

                coll.Add(new VbProperty("Err", "Description"));
                coll.Add(new VbProperty("Err", "Number"));
                coll.Add(new VbProperty("Err", "Source"));

                coll.Add(new VbProperty("Err", "Clear", "()"));
                coll.Add(new VbProperty("Err", "Raise", "(number, source, description, helpfile, helpcontext)"));

                coll.AddPredefinedName("WScript");
                coll.AddPredefinedName("Err");

                coll.Add(new VbProperty("Dictionary", "CompareMode"));
                coll.Add(new VbProperty("Dictionary", "Count"));
                coll.Add(new VbProperty("Dictionary", "Item", "(key)[ = newitem]"));
                coll.Add(new VbProperty("Dictionary", "Add", "(key, item)"));
                coll.Add(new VbProperty("Dictionary", "Exists", "(key)"));
                coll.Add(new VbProperty("Dictionary", "Items", "()"));
                coll.Add(new VbProperty("Dictionary", "Keys", "()"));
                coll.Add(new VbProperty("Dictionary", "Remove", "(key)"));
                coll.Add(new VbProperty("Dictionary", "RemoveAll", "()"));
                coll.Add(new VbProperty("TextStream", "AtEndOfLine"));
                coll.Add(new VbProperty("TextStream", "AtEndOfStream"));
                coll.Add(new VbProperty("File", "Attributes"));
                coll.Add(new VbProperty("Folder", "Attributes"));
                coll.Add(new VbProperty("Drive", "AvailableSpace"));
                coll.Add(new VbProperty("TextStream", "Column"));
                coll.Add(new VbProperty("List", "Count"));
                coll.Add(new VbProperty("File", "DateCreated"));
                coll.Add(new VbProperty("Folder", "DateCreated"));
                coll.Add(new VbProperty("File", "DateLastAccessed"));
                coll.Add(new VbProperty("Folder", "DateLastAccessed"));
                coll.Add(new VbProperty("File", "DateLastModified"));
                coll.Add(new VbProperty("Folder", "DateLastModified"));
                coll.Add(new VbProperty("File", "Drive"));
                coll.Add(new VbProperty("Folder", "Drive"));
                coll.Add(new VbProperty("Drive", "DriveLetter"));
                coll.Add(new VbProperty("FileSystemObject", "Drives"));
                coll.Add(new VbProperty("Drive", "DriveType"));
                coll.Add(new VbProperty("Folder", "Files"));
                coll.Add(new VbProperty("Drive", "FileSystem"));
                coll.Add(new VbProperty("Drive", "FreeSpace"));
                coll.Add(new VbProperty("Drive", "IsReady"));
                coll.Add(new VbProperty("Folder", "IsRootFolder"));
                coll.Add(new VbProperty("TextStream", "Line"));
                coll.Add(new VbProperty("File", "Name"));
                coll.Add(new VbProperty("Folder", "Name"));
                coll.Add(new VbProperty("File", "ParentFolder"));
                coll.Add(new VbProperty("Folder", "ParentFolder"));
                coll.Add(new VbProperty("File", "Path"));
                coll.Add(new VbProperty("Folder", "Path"));
                coll.Add(new VbProperty("Drive", "Path"));
                coll.Add(new VbProperty("Drive", "RootFolder"));
                coll.Add(new VbProperty("Drive", "SerialNumber"));
                coll.Add(new VbProperty("Drive", "ShareName"));
                coll.Add(new VbProperty("File", "ShortName"));
                coll.Add(new VbProperty("Folder", "ShortName"));
                coll.Add(new VbProperty("File", "ShortPath"));
                coll.Add(new VbProperty("Folder", "ShortPath"));
                coll.Add(new VbProperty("File", "Size"));
                coll.Add(new VbProperty("Folder", "Size"));
                coll.Add(new VbProperty("Folder", "SubFolders"));
                coll.Add(new VbProperty("Drive", "TotalSize"));
                coll.Add(new VbProperty("File", "Type"));
                coll.Add(new VbProperty("Folder", "Type"));
                coll.Add(new VbProperty("Drive", "VolumeName"));
                coll.Add(new VbProperty("Folders", "Add", "(folderName)"));
                coll.Add(new VbProperty("FileSystemObject", "BuildPath", "(path, name)"));
                coll.Add(new VbProperty("TextStream", "Close", "()"));
                coll.Add(new VbProperty("File", "Copy", "(destination[, overwrite])"));
                coll.Add(new VbProperty("Folder", "Copy", "(destination[, overwrite])"));
                coll.Add(new VbProperty("FileSystemObject", "CopyFile", "(source, destination[, overwrite])"));
                coll.Add(new VbProperty("FileSystemObject", "CopyFolder", "(source, destination[, overwrite])"));
                coll.Add(new VbProperty("FileSystemObject", "CreateFolder", "(foldername)"));
                coll.Add(new VbProperty("FileSystemObject", "CreateTextFile", "(filename[, overwrite[, unicode]])"));
                coll.Add(new VbProperty("File", "Delete", "(force)"));
                coll.Add(new VbProperty("Folder", "Delete", "(force)"));
                coll.Add(new VbProperty("FileSystemObject", "DeleteFile", "(filespec[, force])"));
                coll.Add(new VbProperty("FileSystemObject", "DeleteFolder", "(folderspec[, force])"));
                coll.Add(new VbProperty("FileSystemObject", "DriveExists", "(drivespec)"));
                coll.Add(new VbProperty("FileSystemObject", "FileExists", "(filespec)"));
                coll.Add(new VbProperty("FileSystemObject", "FolderExists", "(folderspec)"));
                coll.Add(new VbProperty("FileSystemObject", "GetAbsolutePathName", "(pathspec)"));
                coll.Add(new VbProperty("FileSystemObject", "GetBaseName", "(path)"));
                coll.Add(new VbProperty("FileSystemObject", "GetDrive", "(drivespec)"));
                coll.Add(new VbProperty("FileSystemObject", "GetDriveName", "(path)"));
                coll.Add(new VbProperty("FileSystemObject", "GetExtensionName", "(path)"));
                coll.Add(new VbProperty("FileSystemObject", "GetFile", "(filespec)"));
                coll.Add(new VbProperty("FileSystemObject", "GetFileName", "(pathspec)"));
                coll.Add(new VbProperty("FileSystemObject", "GetFileVersion", "(pathspec)"));
                coll.Add(new VbProperty("FileSystemObject", "GetFolder", "(folderspec)"));
                coll.Add(new VbProperty("FileSystemObject", "GetParentFolderName", "(path)"));
                coll.Add(new VbProperty("FileSystemObject", "GetSpecialFolder", "(folderspec)"));
                coll.Add(new VbProperty("FileSystemObject", "GetStandardStream", "(standardStreamType [, unicode])"));
                coll.Add(new VbProperty("FileSystemObject", "GetTempName", "()"));
                coll.Add(new VbProperty("FileSystemObject", "Move", "(destination)"));
                coll.Add(new VbProperty("FileSystemObject", "MoveFile", "(source, destination)"));
                coll.Add(new VbProperty("FileSystemObject", "MoveFolder", "(source, destination)"));
                coll.Add(new VbProperty("File", "OpenAsTextStream", "([iomode, [format]])"));
                coll.Add(new VbProperty("FileSystemObject", "OpenAsTextStream", "([iomode, [format]])"));
                coll.Add(new VbProperty("TextStream", "Read", "(characters)"));
                coll.Add(new VbProperty("TextStream", "ReadAll", "()"));
                coll.Add(new VbProperty("TextStream", "ReadLine", "()"));
                coll.Add(new VbProperty("TextStream", "Skip", "(number)"));
                coll.Add(new VbProperty("TextStream", "SkipLine", "()"));
                coll.Add(new VbProperty("TextStream", "Write", "(string)"));
                coll.Add(new VbProperty("TextStream", "WriteLine", "(string)"));
            }
            if (types.Contains("xce"))
            {
                coll.AddPredefinedName("system");
                coll.AddPredefinedName("xce");
                coll.Add(new VbProperty("xce", "CursorLine"));
                coll.Add(new VbProperty("xce", "CursorColumn"));
                coll.Add(new VbProperty("xce", "TopLine"));
                coll.Add(new VbProperty("xce", "TopColumn"));
                coll.Add(new VbProperty("xce", "WindowWidth"));
                coll.Add(new VbProperty("xce", "WindowHeight"));
                coll.Add(new VbProperty("xce", "FileName"));
                coll.Add(new VbProperty("xce", "InsertMode"));
                coll.Add(new VbProperty("xce", "BlockMode"));
                coll.Add(new VbProperty("xce", "BlockStartLine"));
                coll.Add(new VbProperty("xce", "BlockStartColumn"));
                coll.Add(new VbProperty("xce", "BlockEndLine"));
                coll.Add(new VbProperty("xce", "BlockEndColumn"));
                coll.Add(new VbProperty("xce", "CurrentLine"));
                coll.Add(new VbProperty("xce", "CurrentLineLength"));
                coll.Add(new VbProperty("xce", "LinesCount"));
                coll.Add(new VbProperty("xce", "SyntaxRegionName"));
                coll.Add(new VbProperty("xce", "SyntaxRegionStart"));
                coll.Add(new VbProperty("xce", "SyntaxRegionLength"));
                coll.Add(new VbProperty("xce", "MessageBox", "(text as String, title as String)"));
                coll.Add(new VbProperty("xce", "MessageBoxYesNo", "(text as String, title as String)"));
                coll.Add(new VbProperty("xce", "Prompt", "(label as String, initial as String, width as Long, title as String)"));
                coll.Add(new VbProperty("xce", "ExecuteCommand", "(command as String)"));
                coll.Add(new VbProperty("xce", "ExecuteCommandWithParam", "(command as String, parameter as String)"));
                coll.Add(new VbProperty("xce", "Search", "(regexp as String, ignoreCase as Boolean)"));
                coll.Add(new VbProperty("xce", "Stroke", "(text as String)"));
                coll.Add(new VbProperty("xce", "Line", "(lineIndex as Long)"));
                coll.Add(new VbProperty("xce", "LineLength", "(lineIndex as Long)"));
                coll.Add(new VbProperty("xce", "FirstSyntaxRegion", "(lineIndex as Long)"));
                coll.Add(new VbProperty("xce", "NextSyntaxRegion", "()"));
                coll.Add(new VbProperty("xce", "BlockType_None"));
                coll.Add(new VbProperty("xce", "BlockType_Line"));
                coll.Add(new VbProperty("xce", "BlockType_Box"));
                coll.Add(new VbProperty("xce", "BlockType_Stream"));
                coll.Add(new VbProperty("xce", "BlockText"));
                coll.Add(new VbProperty("system", "NewGuid", "()"));
                coll.Add(new VbProperty("system", "GetApplicationPath", "()"));
                coll.Add(new VbProperty("system", "GetFullPath", "(path as String)"));
                coll.Add(new VbProperty("system", "CombinePaths", "(path1 as String, path2 as String)"));
                coll.Add(new VbProperty("system", "FileExists", "(path as String)"));
                coll.Add(new VbProperty("system", "DirectoryExists", "(path as String)"));
                coll.Add(new VbProperty("system", "Environment", "(variable as String)"));
                coll.Add(new VbProperty("system", "Files", "(path as String, mask as String)"));
                coll.Add(new VbProperty("system", "Directories", "(path as String)"));
                coll.Add(new VbProperty("system", "ParentDirectory", "(path as String)"));
                coll.Add(new VbProperty("system", "DirectoryFromPath", "(path as String)"));
                coll.Add(new VbProperty("system", "FileNameFromPath", "(path as String)"));
                coll.Add(new VbProperty("system", "FileExtensionFromPath", "(path as String)"));
                coll.Add(new VbProperty("system", "GetProfileString", "(string file, string section, string key)"));
                coll.Add(new VbProperty("system", "FindInPaths", "(pathline as String, fileName as String, currentPath as String)"));
                coll.Add(new VbProperty("system", "ReadFile", "(file as String)"));
                coll.Add(new VbProperty("system", "RegexMatch", "(regex as String, str as String)"));
                coll.Add(new VbProperty("system", "WriteFile", "(file as String, text as String, encoding as String)"));
                coll.Add(new VbProperty("system", "AppendFile", "(string file, string text, string encoding)"));
                coll.Add(new VbProperty("system", "CopyFile", "(src as String, dst as String, overwrite as Boolean)"));
                coll.Add(new VbProperty("system", "MoveFile", "(src as String, dst as String, overwrite as Boolean)"));
                coll.Add(new VbProperty("system", "DeleteFile", "(file as String)"));
                coll.Add(new VbProperty("system", "CreateDirectory", "(path as String)"));
                coll.Add(new VbProperty("system", "ExecuteProcess", "(application as String, commandLine as String)"));
                coll.Add(new VbProperty("system", "StartProcess", "(string application, string commandLine)"));
            }
            if (types.Contains("forexconnect"))
            {
                 coll.Add(new VbProperty("AccountRow", "AccountID"));
                 coll.Add(new VbProperty("AccountRow", "AccountName"));
                 coll.Add(new VbProperty("AccountRow", "AccountKind"));
                 coll.Add(new VbProperty("AccountRow", "Balance"));
                 coll.Add(new VbProperty("AccountRow", "NonTradeEquity"));
                 coll.Add(new VbProperty("AccountRow", "M2MEquity"));
                 coll.Add(new VbProperty("AccountRow", "UsedMargin"));
                 coll.Add(new VbProperty("AccountRow", "UsedMargin3"));
                 coll.Add(new VbProperty("AccountRow", "MarginCallFlag"));
                 coll.Add(new VbProperty("AccountRow", "LastMarginCallDate"));
                 coll.Add(new VbProperty("AccountRow", "MaintenanceType"));
                 coll.Add(new VbProperty("AccountRow", "AmountLimit"));
                 coll.Add(new VbProperty("AccountRow", "BaseUnitSize"));
                 coll.Add(new VbProperty("AccountRow", "MaintenanceFlag"));
                 coll.Add(new VbProperty("AccountRow", "ManagerAccountID"));
                 coll.Add(new VbProperty("AccountRow", "LeverageProfileID", "()"));
                 coll.Add(new VbProperty("AccountRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("AccountRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("AccountRow", "TableType"));
                 coll.Add(new VbProperty("AccountRow", "Columns", "()"));
                 coll.Add(new VbProperty("AccountsTable", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("AccountsTable", "getNextRow", "(iterator As ITableIterator, row As AccountTableRow)"));
                 coll.Add(new VbProperty("AccountsTable", "getNextRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator iterator, row As AccountTableRow)"));
                 coll.Add(new VbProperty("AccountsTable", "findRow", "(id As String)"));
                 coll.Add(new VbProperty("AccountsTable", "getStatus", "()"));
                 coll.Add(new VbProperty("AccountsTable", "forEachRow", "(eachRowListener As IEachRowListener)"));
                 coll.Add(new VbProperty("AccountsTable", "isCellChanged", "(row As Integer, column As Integer)"));
                 coll.Add(new VbProperty("AccountsTable", "getNextGenericRow", "(iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("AccountsTable", "getNextGenericRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("AccountsTable", "subscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("AccountsTable", "unsubscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("AccountsTable", "subscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("AccountsTable", "unsubscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("AccountTableRow", "Equity"));
                 coll.Add(new VbProperty("AccountTableRow", "DayPL"));
                 coll.Add(new VbProperty("AccountTableRow", "UsableMargin"));
                 coll.Add(new VbProperty("AccountTableRow", "GrossPL"));
                 coll.Add(new VbProperty("AccountTableRow", "AccountID"));
                 coll.Add(new VbProperty("AccountTableRow", "AccountName"));
                 coll.Add(new VbProperty("AccountTableRow", "AccountKind"));
                 coll.Add(new VbProperty("AccountTableRow", "Balance"));
                 coll.Add(new VbProperty("AccountTableRow", "NonTradeEquity"));
                 coll.Add(new VbProperty("AccountTableRow", "M2MEquity"));
                 coll.Add(new VbProperty("AccountTableRow", "UsedMargin"));
                 coll.Add(new VbProperty("AccountTableRow", "UsedMargin3"));
                 coll.Add(new VbProperty("AccountTableRow", "MarginCallFlag"));
                 coll.Add(new VbProperty("AccountTableRow", "LastMarginCallDate"));
                 coll.Add(new VbProperty("AccountTableRow", "MaintenanceType"));
                 coll.Add(new VbProperty("AccountTableRow", "AmountLimit"));
                 coll.Add(new VbProperty("AccountTableRow", "BaseUnitSize"));
                 coll.Add(new VbProperty("AccountTableRow", "MaintenanceFlag"));
                 coll.Add(new VbProperty("AccountTableRow", "ManagerAccountID"));
                 coll.Add(new VbProperty("AccountTableRow", "LeverageProfileID", "()"));
                 coll.Add(new VbProperty("AccountTableRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("AccountTableRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("AccountTableRow", "TableType"));
                 coll.Add(new VbProperty("AccountTableRow", "Columns", "()"));
                 coll.Add(new VbProperty("ClosedTradeRow", "TradeID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "AccountID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "AccountName"));
                 coll.Add(new VbProperty("ClosedTradeRow", "AccountKind"));
                 coll.Add(new VbProperty("ClosedTradeRow", "OfferID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "Amount"));
                 coll.Add(new VbProperty("ClosedTradeRow", "BuySell"));
                 coll.Add(new VbProperty("ClosedTradeRow", "GrossPL"));
                 coll.Add(new VbProperty("ClosedTradeRow", "Commission"));
                 coll.Add(new VbProperty("ClosedTradeRow", "RolloverInterest"));
                 coll.Add(new VbProperty("ClosedTradeRow", "OpenRate"));
                 coll.Add(new VbProperty("ClosedTradeRow", "OpenQuoteID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "OpenTime"));
                 coll.Add(new VbProperty("ClosedTradeRow", "OpenOrderID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "OpenOrderReqID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "OpenOrderRequestTXT"));
                 coll.Add(new VbProperty("ClosedTradeRow", "OpenOrderParties"));
                 coll.Add(new VbProperty("ClosedTradeRow", "CloseRate"));
                 coll.Add(new VbProperty("ClosedTradeRow", "CloseQuoteID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "CloseTime"));
                 coll.Add(new VbProperty("ClosedTradeRow", "CloseOrderID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "CloseOrderReqID"));
                 coll.Add(new VbProperty("ClosedTradeRow", "CloseOrderRequestTXT"));
                 coll.Add(new VbProperty("ClosedTradeRow", "CloseOrderParties"));
                 coll.Add(new VbProperty("ClosedTradeRow", "TradeIDOrigin"));
                 coll.Add(new VbProperty("ClosedTradeRow", "TradeIDRemain"));
                 coll.Add(new VbProperty("ClosedTradeRow", "ValueDate"));
                 coll.Add(new VbProperty("ClosedTradeRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("ClosedTradeRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("ClosedTradeRow", "TableType"));
                 coll.Add(new VbProperty("ClosedTradeRow", "Columns", "()"));
                 coll.Add(new VbProperty("ClosedTradesTable", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "getNextRow", "(iterator As  ITableIterator)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "getNextRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "findRow", "(String id)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "getStatus", "()"));
                 coll.Add(new VbProperty("ClosedTradesTable", "forEachRow", "(eachRowListener As IEachRowListener)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "isCellChanged", "(row As Integer, column As Integer)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "getNextGenericRow", "(iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "getNextGenericRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "subscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "unsubscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "subscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("ClosedTradesTable", "unsubscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "TradeID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "AccountID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "AccountName"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "AccountKind"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "OfferID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "Amount"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "BuySell"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "GrossPL"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "Commission"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "RolloverInterest"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "OpenRate"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "OpenQuoteID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "OpenTime"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "OpenOrderID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "OpenOrderReqID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "OpenOrderRequestTXT"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "OpenOrderParties"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "CloseRate"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "CloseQuoteID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "CloseTime"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "CloseOrderID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "CloseOrderReqID"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "CloseOrderRequestTXT"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "CloseOrderParties"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "TradeIDOrigin"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "TradeIDRemain"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "ValueDate"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "TableType"));
                 coll.Add(new VbProperty("ClosedTradeTableRow", "Columns", "()"));
                 coll.Add(new VbProperty("Constants", "Buy"));
                 coll.Add(new VbProperty("Constants", "Sell"));
                 coll.Add(new VbProperty("Constants", "INFINITE"));
                 coll.Add(new VbProperty("Constants", "Commands"));
                 coll.Add(new VbProperty("Constants", "Orders"));
                 coll.Add(new VbProperty("Constants", "Peg"));
                 coll.Add(new VbProperty("Constants", "SubscriptionStatuses"));
                 coll.Add(new VbProperty("Constants", "SystemProperties"));
                 coll.Add(new VbProperty("Constants", "TIF"));
                 coll.Add(new VbProperty("Commands", "CreateOCO"));
                 coll.Add(new VbProperty("Commands", "CreateOrder"));
                 coll.Add(new VbProperty("Commands", "CreateOTO"));
                 coll.Add(new VbProperty("Commands", "DeleteOrder"));
                 coll.Add(new VbProperty("Commands", "EditOrder"));
                 coll.Add(new VbProperty("Commands", "JoinToExistingContingencyGroup"));
                 coll.Add(new VbProperty("Commands", "JoinToNewContingencyGroup"));
                 coll.Add(new VbProperty("Commands", "RemoveFromContingencyGroup"));
                 coll.Add(new VbProperty("Commands", "SetSubscriptionStatus"));
                 coll.Add(new VbProperty("Commands", "UpdateMarginRequirements"));
                 coll.Add(new VbProperty("Orders", "Limit"));
                 coll.Add(new VbProperty("Orders", "LimitEntry"));
                 coll.Add(new VbProperty("Orders", "MarketClose"));
                 coll.Add(new VbProperty("Orders", "MarketCloseRange"));
                 coll.Add(new VbProperty("Orders", "MarketOpen"));
                 coll.Add(new VbProperty("Orders", "MarketOpenRange"));
                 coll.Add(new VbProperty("Orders", "Stop"));
                 coll.Add(new VbProperty("Orders", "StopEntry"));
                 coll.Add(new VbProperty("Orders", "Entry"));
                 coll.Add(new VbProperty("Orders", "TrueMarketClose"));
                 coll.Add(new VbProperty("Orders", "TrueMarketOpen"));
                 coll.Add(new VbProperty("Peg", "FromClose"));
                 coll.Add(new VbProperty("Peg", "FromOpen"));
                 coll.Add(new VbProperty("SubscriptionStatuses", "Tradable"));
                 coll.Add(new VbProperty("SubscriptionStatuses", "Disable"));
                 coll.Add(new VbProperty("SubscriptionStatuses", "ViewOnly"));
                 coll.Add(new VbProperty("SystemProperties", "BASE_CRNCY"));
                 coll.Add(new VbProperty("SystemProperties", "BASE_CRNCY_PRECISION"));
                 coll.Add(new VbProperty("SystemProperties", "BASE_CRNCY_SYMBOL"));
                 coll.Add(new VbProperty("SystemProperties", "BASE_TIME_ZONE"));
                 coll.Add(new VbProperty("SystemProperties", "BASE_UNIT_SIZE"));
                 coll.Add(new VbProperty("SystemProperties", "COND_DIST"));
                 coll.Add(new VbProperty("SystemProperties", "COND_DIST_ENTRY"));
                 coll.Add(new VbProperty("SystemProperties", "CP_170"));
                 coll.Add(new VbProperty("SystemProperties", "CP_171"));
                 coll.Add(new VbProperty("SystemProperties", "CP_172"));
                 coll.Add(new VbProperty("SystemProperties", "CP_86"));
                 coll.Add(new VbProperty("SystemProperties", "CP_88"));
                 coll.Add(new VbProperty("SystemProperties", "CP_89"));
                 coll.Add(new VbProperty("SystemProperties", "CP_94"));
                 coll.Add(new VbProperty("SystemProperties", "END_TRADING_DAY"));
                 coll.Add(new VbProperty("SystemProperties", "FORCE_PASSWORD_CHANGE"));
                 coll.Add(new VbProperty("SystemProperties", "MARKET_OPEN"));
                 coll.Add(new VbProperty("SystemProperties", "PEGGED_STOP_LIMIT_DISABLED"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_0"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_1"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_2"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_3"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_4"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_5"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_6"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_7"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_8"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_h2"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_h3"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_h4"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_h6"));
                 coll.Add(new VbProperty("SystemProperties", "QUERYDEPTH_h8"));
                 coll.Add(new VbProperty("SystemProperties", "SERVER_TIME_UTC"));
                 coll.Add(new VbProperty("SystemProperties", "SupportTickVolume"));
                 coll.Add(new VbProperty("SystemProperties", "TP_170"));
                 coll.Add(new VbProperty("SystemProperties", "TP_171"));
                 coll.Add(new VbProperty("SystemProperties", "TP_172"));
                 coll.Add(new VbProperty("SystemProperties", "TP_86"));
                 coll.Add(new VbProperty("SystemProperties", "TP_88"));
                 coll.Add(new VbProperty("SystemProperties", "TP_89"));
                 coll.Add(new VbProperty("SystemProperties", "TP_94"));
                 coll.Add(new VbProperty("SystemProperties", "TRAILING_DYNAMIC"));
                 coll.Add(new VbProperty("SystemProperties", "TRAILING_FLUCTUATE"));
                 coll.Add(new VbProperty("SystemProperties", "TRAILING_FLUCTUATE_PTS_MAX"));
                 coll.Add(new VbProperty("SystemProperties", "TRAILING_FLUCTUATE_PTS_MIN"));
                 coll.Add(new VbProperty("TIF", "DAY"));
                 coll.Add(new VbProperty("TIF", "FOK"));
                 coll.Add(new VbProperty("TIF", "GTC"));
                 coll.Add(new VbProperty("TIF", "IOC"));
                 coll.Add(new VbProperty("GenericTableResponseReader", "Count"));
                 coll.Add(new VbProperty("GenericTableResponseReader", "Type"));
                 coll.Add(new VbProperty("GenericTableResponseReader", "getCell", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("GenericTableResponseReader", "Columns"));
                 coll.Add(new VbProperty("GenericTableResponseReader", "isCellValid", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IAccountsTableReader", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("IAccountsTableReader", "Count"));
                 coll.Add(new VbProperty("IAccountsTableReader", "Type"));
                 coll.Add(new VbProperty("IAccountsTableReader", "getCell", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IAccountsTableReader", "Columns"));
                 coll.Add(new VbProperty("IAccountsTableReader", "isCellValid", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IClosedTradesTableReader", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("IClosedTradesTableReader", "Count"));
                 coll.Add(new VbProperty("IClosedTradesTableReader", "Type"));
                 coll.Add(new VbProperty("IClosedTradesTableReader", "getCell", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IClosedTradesTableReader", "Columns"));
                 coll.Add(new VbProperty("IClosedTradesTableReader", "isCellValid", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IEachRowListener", "EachRow", "(rowID As String, rowData As Row)"));
                 coll.Add(new VbProperty("ILastOrderUpdateResponseReader", "Order"));
                 coll.Add(new VbProperty("ILastOrderUpdateResponseReader", "UpdateType"));
                 coll.Add(new VbProperty("ILoginRules", "isTableLoadedByDefault", "(tableType As TableType)"));
                 coll.Add(new VbProperty("ILoginRules", "getTableRefreshResponse", "(tableType As TableType)"));
                 coll.Add(new VbProperty("ILoginRules", "getSystemPropertiesResponse", "()"));
                 coll.Add(new VbProperty("ILoginRules", "getPermissionChecker", "()"));
                 coll.Add(new VbProperty("ILoginRules", "getTradingSettingsProvider", "()"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "isBar"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "Count"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getDate", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getBid", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getAsk", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getBidOpen", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getBidHigh", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getBidLow", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getBidClose", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getAskOpen", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getAskHigh", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getAskLow", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getAskClose", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getVolume", "(index As Integer)"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getLastBarVolume", "()"));
                 coll.Add(new VbProperty("IMarketDataSnapshotResponseReader", "getLastBarTime", "()"));
                 coll.Add(new VbProperty("IMessagesTableReader", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("IMessagesTableReader", "Count"));
                 coll.Add(new VbProperty("IMessagesTableReader", "Type"));
                 coll.Add(new VbProperty("IMessagesTableReader", "getCell", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IMessagesTableReader", "Columns"));
                 coll.Add(new VbProperty("IMessagesTableReader", "isCellValid", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IOffersTableReader", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("IOffersTableReader", "Count"));
                 coll.Add(new VbProperty("IOffersTableReader", "Type"));
                 coll.Add(new VbProperty("IOffersTableReader", "getCell", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IOffersTableReader", "Columns"));
                 coll.Add(new VbProperty("IOffersTableReader", "isCellValid", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IOrdersTableReader", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("IOrdersTableReader", "Count"));
                 coll.Add(new VbProperty("IOrdersTableReader", "Type"));
                 coll.Add(new VbProperty("IOrdersTableReader", "getCell", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IOrdersTableReader", "Columns"));
                 coll.Add(new VbProperty("IOrdersTableReader", "isCellValid", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canCreateMarketOpenOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canChangeMarketOpenOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canDeleteMarketOpenOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canCreateMarketCloseOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canChangeMarketCloseOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canDeleteMarketCloseOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canCreateEntryOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canChangeEntryOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canDeleteEntryOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canCreateStopLimitOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canChangeStopLimitOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canDeleteStopLimitOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canRequestQuote", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canAcceptQuote", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canDeleteQuote", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canCreateOCO", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canJoinOCO", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canExcludeOCO", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canChangeOfferSubscription", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canCreateNetCloseOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canChangeNetCloseOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canDeleteNetCloseOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canCreateNetStopLimitOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canChangeNetStopLimitOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canDeleteNetStopLimitOrder", "(instrument As String)"));
                 coll.Add(new VbProperty("IPermissionChecker", "canUseDynamicTrailingForStop", "()"));
                 coll.Add(new VbProperty("IPermissionChecker", "canUseDynamicTrailingForLimit", "()"));
                 coll.Add(new VbProperty("IPermissionChecker", "canUseDynamicTrailingForEntryStop", "()"));
                 coll.Add(new VbProperty("IPermissionChecker", "canUseDynamicTrailingForEntryLimit", "()"));
                 coll.Add(new VbProperty("IPermissionChecker", "canUseFluctuateTrailingForStop", "()"));
                 coll.Add(new VbProperty("IPermissionChecker", "canUseFluctuateTrailingForLimit", "()"));
                 coll.Add(new VbProperty("IPermissionChecker", "canUseFluctuateTrailingForEntryStop", "()"));
                 coll.Add(new VbProperty("IPermissionChecker", "canUseFluctuateTrailingForEntryLimit", "()"));
                 coll.Add(new VbProperty("IRequest", "RequestID"));
                 coll.Add(new VbProperty("IRequest", "ChildrenCount"));
                 coll.Add(new VbProperty("IRequest", "getChildRequest", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("IRequestFactory", "Timeframes"));
                 coll.Add(new VbProperty("IRequestFactory", "createMarketDataSnapshotRequestInstrument", "(String instrument, ITimeframe timeframe, int maxBars)"));
                 coll.Add(new VbProperty("IRequestFactory", "fillMarketDataSnapshotRequestTime", "(request As IRequest, timeFrom As Date, timeTo As Date, isIncludeWeekends As Boolean)"));
                 coll.Add(new VbProperty("IRequestFactory", "createRefreshTableRequest", "(table As TableType)"));
                 coll.Add(new VbProperty("IRequestFactory", "createRefreshTableRequestByAccount", "(TableType table, String account)"));
                 coll.Add(new VbProperty("IRequestFactory", "createOrderRequest", "(IValueMap valueMap)"));
                 coll.Add(new VbProperty("IRequestFactory", "createValueMap", "()"));
                 coll.Add(new VbProperty("IRequestFactory", "getLastError", "()"));
                 coll.Add(new VbProperty("IResponse", "RequestID"));
                 coll.Add(new VbProperty("IResponse", "Type", "()"));
                 coll.Add(new VbProperty("IResponseListener", "RequestCompleted", "(requestId As String, response AsIResponse)"));
                 coll.Add(new VbProperty("IResponseListener", "RequestFailed", "(requestId As String, error As String)"));
                 coll.Add(new VbProperty("IResponseListener", "TablesUpdates", "(data As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createMarketDataSnapshotReader", "(IResponse response)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createTablesUpdatesReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createOffersTableReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createAccountsTableReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createOrdersTableReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createTradesTableReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createClosedTradesTableReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createMessagesTableReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createOrderResponseReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createSystemPropertiesReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "processMarginRequirementsResponse", "(response As IResponse)"));
                 coll.Add(new VbProperty("IResponseReaderFactory", "createLastOrderUpdateResponseReader", "(response As IResponse)"));
                 coll.Add(new VbProperty("ISessionDescriptor", "ID"));
                 coll.Add(new VbProperty("ISessionDescriptor", "Name"));
                 coll.Add(new VbProperty("ISessionDescriptor", "Description"));
                 coll.Add(new VbProperty("ISessionDescriptor", "RequiresPin"));
                 coll.Add(new VbProperty("ISessionDescriptorCollection", "Count"));
                 coll.Add(new VbProperty("ISessionDescriptorCollection", "Item", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("ISessionStatus", "SessionStatusChanged", "(status As SessionStatusCode)"));
                 coll.Add(new VbProperty("ISessionStatus", "LoginFailed", "(error As String)"));
                 coll.Add(new VbProperty("ISystemPropertiesReader", "Count"));
                 coll.Add(new VbProperty("ISystemPropertiesReader", "findProperty", "(id As String)"));
                 coll.Add(new VbProperty("ISystemPropertiesReader", "getProperty", "(index As Integer, out value As String)"));
                 coll.Add(new VbProperty("ITableColumn", "id"));
                 coll.Add(new VbProperty("ITableColumn", "ColumnType"));
                 coll.Add(new VbProperty("ITableColumnCollection", "Count"));
                 coll.Add(new VbProperty("ITableColumnCollection", "Item", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("ITableColumnCollection", "Item_2", "(sId As String)"));
                 coll.Add(new VbProperty("ITableIterator", "reset", "()"));
                 coll.Add(new VbProperty("ITableListener", "Added", "(rowID As String, rowData As Row)"));
                 coll.Add(new VbProperty("ITableListener", "Changed", "(rowID As String, rowData As Row)"));
                 coll.Add(new VbProperty("ITableListener", "Deleted", "(rowID As String, rowData As Row)"));
                 coll.Add(new VbProperty("ITableListener", "StatusChanged", "(status As TableStatus)"));
                 coll.Add(new VbProperty("ITableManager", "getTable", "(tableType As TableType)"));
                 coll.Add(new VbProperty("ITableManager", "getStatus", "()"));
                 coll.Add(new VbProperty("ITableManager", "lockUpdates", "()"));
                 coll.Add(new VbProperty("ITableManager", "unlockUpdates", "()"));
                 coll.Add(new VbProperty("ITableManagerListener", "StatusChanged", "(status As TableManagerStatus, tableManager As ITableManager)"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "ServerTime"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "Count"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "getUpdateType", "(index As Integer)"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "getUpdateTable", "(index As Integer)"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "getOfferRow", "(index As Integer)"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "getAccountRow", "(index As Integer)"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "getOrderRow", "(index As Integer)"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "getTradeRow", "(index As Integer)"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "getClosedTradeRow", "(index As Integer)"));
                 coll.Add(new VbProperty("ITablesUpdatesReader", "getMessageRow", "(index As Integer)"));
                 coll.Add(new VbProperty("ITimeConverter", "convert", "(date As Date, to As TimeConverterTimeZone)"));
                 coll.Add(new VbProperty("ITimeframe", "Size"));
                 coll.Add(new VbProperty("ITimeframe", "ID"));
                 coll.Add(new VbProperty("ITimeframe", "Unit"));
                 coll.Add(new VbProperty("ITimeframeCollection", "get", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("ITimeframeCollection", "getByID", "(sId As String)"));
                 coll.Add(new VbProperty("ITimeframeCollection", "Count"));
                 coll.Add(new VbProperty("ITradesTableReader", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("ITradesTableReader", "Count"));
                 coll.Add(new VbProperty("ITradesTableReader", "Type"));
                 coll.Add(new VbProperty("ITradesTableReader", "getCell", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("ITradesTableReader", "Columns"));
                 coll.Add(new VbProperty("ITradesTableReader", "isCellValid", "(iRow As Integer, iColumn As Integer)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getCondDistStopForTrade", "(instrument As String)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getCondDistLimitForTrade", "(instrument As String)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getCondDistEntryStop", "(instrument As String)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getCondDistEntryLimit", "(instrument As String)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getMinQuantity", "(instrument As String, AccountRow accountRow)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getMaxQuantity", "(instrument As String, AccountRow accountRow)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getBaseUnitSize", "(instrument As String, AccountRow accountRow)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getMarketStatus", "(instrument As String)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getMinTrailingStep", "()"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getMaxTrailingStep", "()"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getMMR", "(instrument As String, accountRow As AccountRow)"));
                 coll.Add(new VbProperty("ITradingSettingsProvider", "getMargins", "(instrument As String, accountRow As AccountRow, out mmr As Double, out emr As Double, out lmr As Double)"));
                 coll.Add(new VbProperty("IValueMap", "setString", "(RequestParamsEnum param, String value)"));
                 coll.Add(new VbProperty("IValueMap", "setDouble", "(param As RequestParamsEnum, value As Double)"));
                 coll.Add(new VbProperty("IValueMap", "setInt", "(RequestParamsEnum param, value As Integer)"));
                 coll.Add(new VbProperty("IValueMap", "setBoolean", "(RequestParamsEnum param, value As Boolean)"));
                 coll.Add(new VbProperty("IValueMap", "clone", "()"));
                 coll.Add(new VbProperty("IValueMap", "clear", "()"));
                 coll.Add(new VbProperty("IValueMap", "getChildrenCount", "()"));
                 coll.Add(new VbProperty("IValueMap", "getChild", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("IValueMap", "appendChild", "(IValueMap valueMap)"));
                 coll.Add(new VbProperty("IValueMap", "iterator", "()"));
                 coll.Add(new VbProperty("MessageRow", "MsgID"));
                 coll.Add(new VbProperty("MessageRow", "Time"));
                 coll.Add(new VbProperty("MessageRow", "From"));
                 coll.Add(new VbProperty("MessageRow", "Type"));
                 coll.Add(new VbProperty("MessageRow", "Feature"));
                 coll.Add(new VbProperty("MessageRow", "Text"));
                 coll.Add(new VbProperty("MessageRow", "Subject"));
                 coll.Add(new VbProperty("MessageRow", "HTMLFragmentFlag"));
                 coll.Add(new VbProperty("MessageRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("MessageRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("MessageRow", "TableType"));
                 coll.Add(new VbProperty("MessageRow", "Columns", "()"));
                 coll.Add(new VbProperty("MessagesTable", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("MessagesTable", "getNextRow", "(iterator As ITableIterator, out row As MessageTableRow)"));
                 coll.Add(new VbProperty("MessagesTable", "getNextRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As MessageTableRow)"));
                 coll.Add(new VbProperty("MessagesTable", "findRow", "(id As String, out row As MessageTableRow)"));
                 coll.Add(new VbProperty("MessagesTable", "getStatus", "()"));
                 coll.Add(new VbProperty("MessagesTable", "forEachRow", "(eachRowListener As IEachRowListener)"));
                 coll.Add(new VbProperty("MessagesTable", "isCellChanged", "(row As Integer, column As Integer)"));
                 coll.Add(new VbProperty("MessagesTable", "getNextGenericRow", "(iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("MessagesTable", "getNextGenericRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("MessagesTable", "subscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("MessagesTable", "unsubscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("MessagesTable", "subscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("MessagesTable", "unsubscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("MessageTableRow", "MsgID"));
                 coll.Add(new VbProperty("MessageTableRow", "Time"));
                 coll.Add(new VbProperty("MessageTableRow", "From"));
                 coll.Add(new VbProperty("MessageTableRow", "Type"));
                 coll.Add(new VbProperty("MessageTableRow", "Feature"));
                 coll.Add(new VbProperty("MessageTableRow", "Text"));
                 coll.Add(new VbProperty("MessageTableRow", "Subject"));
                 coll.Add(new VbProperty("MessageTableRow", "HTMLFragmentFlag"));
                 coll.Add(new VbProperty("MessageTableRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("MessageTableRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("MessageTableRow", "TableType"));
                 coll.Add(new VbProperty("MessageTableRow", "Columns", "()"));
                 coll.Add(new VbProperty("OfferRow", "OfferID"));
                 coll.Add(new VbProperty("OfferRow", "isOfferIDValid"));
                 coll.Add(new VbProperty("OfferRow", "Instrument"));
                 coll.Add(new VbProperty("OfferRow", "isInstrumentValid"));
                 coll.Add(new VbProperty("OfferRow", "QuoteID"));
                 coll.Add(new VbProperty("OfferRow", "isQuoteIDValid"));
                 coll.Add(new VbProperty("OfferRow", "Bid"));
                 coll.Add(new VbProperty("OfferRow", "isBidValid"));
                 coll.Add(new VbProperty("OfferRow", "Ask"));
                 coll.Add(new VbProperty("OfferRow", "isAskValid"));
                 coll.Add(new VbProperty("OfferRow", "Low"));
                 coll.Add(new VbProperty("OfferRow", "isLowValid"));
                 coll.Add(new VbProperty("OfferRow", "High"));
                 coll.Add(new VbProperty("OfferRow", "isHighValid"));
                 coll.Add(new VbProperty("OfferRow", "Volume"));
                 coll.Add(new VbProperty("OfferRow", "isVolumeValid"));
                 coll.Add(new VbProperty("OfferRow", "Time"));
                 coll.Add(new VbProperty("OfferRow", "isTimeValid"));
                 coll.Add(new VbProperty("OfferRow", "BidTradable"));
                 coll.Add(new VbProperty("OfferRow", "isBidTradableValid"));
                 coll.Add(new VbProperty("OfferRow", "AskTradable"));
                 coll.Add(new VbProperty("OfferRow", "isAskTradableValid"));
                 coll.Add(new VbProperty("OfferRow", "SellInterest"));
                 coll.Add(new VbProperty("OfferRow", "isSellInterestValid"));
                 coll.Add(new VbProperty("OfferRow", "BuyInterest"));
                 coll.Add(new VbProperty("OfferRow", "isBuyInterestValid"));
                 coll.Add(new VbProperty("OfferRow", "ContractCurrency"));
                 coll.Add(new VbProperty("OfferRow", "isContractCurrencyValid"));
                 coll.Add(new VbProperty("OfferRow", "Digits"));
                 coll.Add(new VbProperty("OfferRow", "isDigitsValid"));
                 coll.Add(new VbProperty("OfferRow", "PointSize"));
                 coll.Add(new VbProperty("OfferRow", "isPointSizeValid"));
                 coll.Add(new VbProperty("OfferRow", "SubscriptionStatus"));
                 coll.Add(new VbProperty("OfferRow", "isSubscriptionStatusValid"));
                 coll.Add(new VbProperty("OfferRow", "InstrumentType"));
                 coll.Add(new VbProperty("OfferRow", "isInstrumentTypeValid"));
                 coll.Add(new VbProperty("OfferRow", "ContractMultiplier"));
                 coll.Add(new VbProperty("OfferRow", "isContractMultiplierValid"));
                 coll.Add(new VbProperty("OfferRow", "TradingStatus"));
                 coll.Add(new VbProperty("OfferRow", "isTradingStatusValid"));
                 coll.Add(new VbProperty("OfferRow", "ValueDate"));
                 coll.Add(new VbProperty("OfferRow", "isValueDateValid"));
                 coll.Add(new VbProperty("OfferRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("OfferRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("OfferRow", "TableType"));
                 coll.Add(new VbProperty("OfferRow", "Columns", "()"));
                 coll.Add(new VbProperty("OffersTable", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("OffersTable", "getNextRow", "(iterator As ITableIterator, row As OfferTableRow)"));
                 coll.Add(new VbProperty("OffersTable", "getNextRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, row As OfferTableRow)"));
                 coll.Add(new VbProperty("OffersTable", "findRow", "(String id)"));
                 coll.Add(new VbProperty("OffersTable", "getStatus", "()"));
                 coll.Add(new VbProperty("OffersTable", "forEachRow", "(eachRowListener As IEachRowListener)"));
                 coll.Add(new VbProperty("OffersTable", "isCellChanged", "(row As Integer, column As Integer)"));
                 coll.Add(new VbProperty("OffersTable", "getNextGenericRow", "(iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("OffersTable", "getNextGenericRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("OffersTable", "subscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("OffersTable", "unsubscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("OffersTable", "subscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("OffersTable", "unsubscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("OfferTableRow", "PipCost"));
                 coll.Add(new VbProperty("OfferTableRow", "OfferID"));
                 coll.Add(new VbProperty("OfferTableRow", "isOfferIDValid"));
                 coll.Add(new VbProperty("OfferTableRow", "Instrument"));
                 coll.Add(new VbProperty("OfferTableRow", "isInstrumentValid"));
                 coll.Add(new VbProperty("OfferTableRow", "QuoteID"));
                 coll.Add(new VbProperty("OfferTableRow", "isQuoteIDValid"));
                 coll.Add(new VbProperty("OfferTableRow", "Bid"));
                 coll.Add(new VbProperty("OfferTableRow", "isBidValid"));
                 coll.Add(new VbProperty("OfferTableRow", "Ask"));
                 coll.Add(new VbProperty("OfferTableRow", "isAskValid"));
                 coll.Add(new VbProperty("OfferTableRow", "Low"));
                 coll.Add(new VbProperty("OfferTableRow", "isLowValid"));
                 coll.Add(new VbProperty("OfferTableRow", "High"));
                 coll.Add(new VbProperty("OfferTableRow", "isHighValid"));
                 coll.Add(new VbProperty("OfferTableRow", "Volume"));
                 coll.Add(new VbProperty("OfferTableRow", "isVolumeValid"));
                 coll.Add(new VbProperty("OfferTableRow", "Time"));
                 coll.Add(new VbProperty("OfferTableRow", "isTimeValid"));
                 coll.Add(new VbProperty("OfferTableRow", "BidTradable"));
                 coll.Add(new VbProperty("OfferTableRow", "isBidTradableValid"));
                 coll.Add(new VbProperty("OfferTableRow", "AskTradable"));
                 coll.Add(new VbProperty("OfferTableRow", "isAskTradableValid"));
                 coll.Add(new VbProperty("OfferTableRow", "SellInterest"));
                 coll.Add(new VbProperty("OfferTableRow", "isSellInterestValid"));
                 coll.Add(new VbProperty("OfferTableRow", "BuyInterest"));
                 coll.Add(new VbProperty("OfferTableRow", "isBuyInterestValid"));
                 coll.Add(new VbProperty("OfferTableRow", "ContractCurrency"));
                 coll.Add(new VbProperty("OfferTableRow", "isContractCurrencyValid"));
                 coll.Add(new VbProperty("OfferTableRow", "Digits"));
                 coll.Add(new VbProperty("OfferTableRow", "isDigitsValid"));
                 coll.Add(new VbProperty("OfferTableRow", "PointSize"));
                 coll.Add(new VbProperty("OfferTableRow", "isPointSizeValid"));
                 coll.Add(new VbProperty("OfferTableRow", "SubscriptionStatus"));
                 coll.Add(new VbProperty("OfferTableRow", "isSubscriptionStatusValid"));
                 coll.Add(new VbProperty("OfferTableRow", "InstrumentType"));
                 coll.Add(new VbProperty("OfferTableRow", "isInstrumentTypeValid"));
                 coll.Add(new VbProperty("OfferTableRow", "ContractMultiplier"));
                 coll.Add(new VbProperty("OfferTableRow", "isContractMultiplierValid"));
                 coll.Add(new VbProperty("OfferTableRow", "TradingStatus"));
                 coll.Add(new VbProperty("OfferTableRow", "isTradingStatusValid"));
                 coll.Add(new VbProperty("OfferTableRow", "ValueDate"));
                 coll.Add(new VbProperty("OfferTableRow", "isValueDateValid"));
                 coll.Add(new VbProperty("OfferTableRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("OfferTableRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("OfferTableRow", "TableType"));
                 coll.Add(new VbProperty("OfferTableRow", "Columns", "()"));
                 coll.Add(new VbProperty("OrderResponseReader", "OrderID"));
                 coll.Add(new VbProperty("OrderResponseReader", "isUnderDealerIntervention", "()"));
                 coll.Add(new VbProperty("OrderRow", "OrderID"));
                 coll.Add(new VbProperty("OrderRow", "RequestID"));
                 coll.Add(new VbProperty("OrderRow", "Rate"));
                 coll.Add(new VbProperty("OrderRow", "ExecutionRate"));
                 coll.Add(new VbProperty("OrderRow", "RateMin"));
                 coll.Add(new VbProperty("OrderRow", "RateMax"));
                 coll.Add(new VbProperty("OrderRow", "TradeID"));
                 coll.Add(new VbProperty("OrderRow", "AccountID"));
                 coll.Add(new VbProperty("OrderRow", "AccountName"));
                 coll.Add(new VbProperty("OrderRow", "OfferID"));
                 coll.Add(new VbProperty("OrderRow", "NetQuantity"));
                 coll.Add(new VbProperty("OrderRow", "BuySell"));
                 coll.Add(new VbProperty("OrderRow", "Stage"));
                 coll.Add(new VbProperty("OrderRow", "Type"));
                 coll.Add(new VbProperty("OrderRow", "Status"));
                 coll.Add(new VbProperty("OrderRow", "StatusTime"));
                 coll.Add(new VbProperty("OrderRow", "Amount"));
                 coll.Add(new VbProperty("OrderRow", "Lifetime"));
                 coll.Add(new VbProperty("OrderRow", "AtMarket"));
                 coll.Add(new VbProperty("OrderRow", "TrailStep"));
                 coll.Add(new VbProperty("OrderRow", "TrailRate"));
                 coll.Add(new VbProperty("OrderRow", "TimeInForce"));
                 coll.Add(new VbProperty("OrderRow", "AccountKind"));
                 coll.Add(new VbProperty("OrderRow", "RequestTXT"));
                 coll.Add(new VbProperty("OrderRow", "ContingentOrderID"));
                 coll.Add(new VbProperty("OrderRow", "ContingencyType"));
                 coll.Add(new VbProperty("OrderRow", "PrimaryID"));
                 coll.Add(new VbProperty("OrderRow", "OriginAmount"));
                 coll.Add(new VbProperty("OrderRow", "FilledAmount"));
                 coll.Add(new VbProperty("OrderRow", "WorkingIndicator"));
                 coll.Add(new VbProperty("OrderRow", "PegType"));
                 coll.Add(new VbProperty("OrderRow", "PegOffset"));
                 coll.Add(new VbProperty("OrderRow", "ExpireDate"));
                 coll.Add(new VbProperty("OrderRow", "ValueDate"));
                 coll.Add(new VbProperty("OrderRow", "Parties"));
                 coll.Add(new VbProperty("OrderRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("OrderRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("OrderRow", "TableType"));
                 coll.Add(new VbProperty("OrderRow", "Columns", "()"));
                 coll.Add(new VbProperty("OrdersTable", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("OrdersTable", "getNextRow", "(iterator As ITableIterator, out row As OrderTableRow)"));
                 coll.Add(new VbProperty("OrdersTable", "getNextRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As OrderTableRow)"));
                 coll.Add(new VbProperty("OrdersTable", "findRow", "(id As String, out row As OrderTableRow)"));
                 coll.Add(new VbProperty("OrdersTable", "getStatus", "()"));
                 coll.Add(new VbProperty("OrdersTable", "forEachRow", "(eachRowListener As IEachRowListener)"));
                 coll.Add(new VbProperty("OrdersTable", "isCellChanged", "(row As Integer, column As Integer)"));
                 coll.Add(new VbProperty("OrdersTable", "getNextGenericRow", "(iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("OrdersTable", "getNextGenericRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("OrdersTable", "subscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("OrdersTable", "unsubscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("OrdersTable", "subscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("OrdersTable", "unsubscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("OrderTableRow", "Stop"));
                 coll.Add(new VbProperty("OrderTableRow", "Limit"));
                 coll.Add(new VbProperty("OrderTableRow", "StopTrailStep"));
                 coll.Add(new VbProperty("OrderTableRow", "StopTrailRate"));
                 coll.Add(new VbProperty("OrderTableRow", "OrderID"));
                 coll.Add(new VbProperty("OrderTableRow", "RequestID"));
                 coll.Add(new VbProperty("OrderTableRow", "Rate"));
                 coll.Add(new VbProperty("OrderTableRow", "ExecutionRate"));
                 coll.Add(new VbProperty("OrderTableRow", "RateMin"));
                 coll.Add(new VbProperty("OrderTableRow", "RateMax"));
                 coll.Add(new VbProperty("OrderTableRow", "TradeID"));
                 coll.Add(new VbProperty("OrderTableRow", "AccountID"));
                 coll.Add(new VbProperty("OrderTableRow", "AccountName"));
                 coll.Add(new VbProperty("OrderTableRow", "OfferID"));
                 coll.Add(new VbProperty("OrderTableRow", "NetQuantity"));
                 coll.Add(new VbProperty("OrderTableRow", "BuySell"));
                 coll.Add(new VbProperty("OrderTableRow", "Stage"));
                 coll.Add(new VbProperty("OrderTableRow", "Type"));
                 coll.Add(new VbProperty("OrderTableRow", "Status"));
                 coll.Add(new VbProperty("OrderTableRow", "StatusTime"));
                 coll.Add(new VbProperty("OrderTableRow", "Amount"));
                 coll.Add(new VbProperty("OrderTableRow", "Lifetime"));
                 coll.Add(new VbProperty("OrderTableRow", "AtMarket"));
                 coll.Add(new VbProperty("OrderTableRow", "TrailStep"));
                 coll.Add(new VbProperty("OrderTableRow", "TrailRate"));
                 coll.Add(new VbProperty("OrderTableRow", "TimeInForce"));
                 coll.Add(new VbProperty("OrderTableRow", "AccountKind"));
                 coll.Add(new VbProperty("OrderTableRow", "RequestTXT"));
                 coll.Add(new VbProperty("OrderTableRow", "ContingentOrderID"));
                 coll.Add(new VbProperty("OrderTableRow", "ContingencyType"));
                 coll.Add(new VbProperty("OrderTableRow", "PrimaryID"));
                 coll.Add(new VbProperty("OrderTableRow", "OriginAmount"));
                 coll.Add(new VbProperty("OrderTableRow", "FilledAmount"));
                 coll.Add(new VbProperty("OrderTableRow", "WorkingIndicator"));
                 coll.Add(new VbProperty("OrderTableRow", "PegType"));
                 coll.Add(new VbProperty("OrderTableRow", "PegOffset"));
                 coll.Add(new VbProperty("OrderTableRow", "ExpireDate"));
                 coll.Add(new VbProperty("OrderTableRow", "ValueDate"));
                 coll.Add(new VbProperty("OrderTableRow", "Parties"));
                 coll.Add(new VbProperty("OrderTableRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("OrderTableRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("OrderTableRow", "TableType"));
                 coll.Add(new VbProperty("OrderTableRow", "Columns", "()"));
                 coll.Add(new VbProperty("Row", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("Row", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("Row", "TableType"));
                 coll.Add(new VbProperty("Row", "Columns", "()"));
                 coll.Add(new VbProperty("Session", "subscribeSessionStatus", "(listener As ISessionStatus)"));
                 coll.Add(new VbProperty("Session", "unsubscribeSessionStatus", "(listener As ISessionStatus)"));
                 coll.Add(new VbProperty("Session", "subscribeResponse", "(listener As IResponseListener)"));
                 coll.Add(new VbProperty("Session", "unsubscribeResponse", "(listener As IResponseListener)"));
                 coll.Add(new VbProperty("Session", "login", "(user As String, password As String, url As String, connection As String)"));
                 coll.Add(new VbProperty("Session", "logout", "()"));
                 coll.Add(new VbProperty("Session", "getTradingSessionDescriptors", "()"));
                 coll.Add(new VbProperty("Session", "setTradingSession", "(sessionId As String, pin As String)"));
                 coll.Add(new VbProperty("Session", "getRequestFactory", "()"));
                 coll.Add(new VbProperty("Session", "sendRequest", "(request As IRequest)"));
                 coll.Add(new VbProperty("Session", "getResponseReaderFactory", "()"));
                 coll.Add(new VbProperty("Session", "getTimeConverter", "()"));
                 coll.Add(new VbProperty("Session", "getLoginRules", "()"));
                 coll.Add(new VbProperty("Session", "setPriceUpdateMode", "(mode As PriceUpdateMode)"));
                 coll.Add(new VbProperty("Session", "getPriceUpdateMode", "()"));
                 coll.Add(new VbProperty("Session", "getTableManager", "()"));
                 coll.Add(new VbProperty("Session", "getTableManagerByAccount", "(accountID As String)"));
                 coll.Add(new VbProperty("Session", "useTableManager", "(mode As TableManagerMode, listener As ITableManagerListener)"));
                 coll.Add(new VbProperty("Session", "getServerTime", "()"));
                 coll.Add(new VbProperty("Session", "getReportURL", "(account As AccountRow, dateFrom As Date, dateTo As Date,  format As String, reportType As String, langID As String, ansiCP As Integer)"));
                 coll.Add(new VbProperty("SummaryRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("SummaryRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("SummaryRow", "TableType"));
                 coll.Add(new VbProperty("SummaryRow", "Columns", "()"));
                 coll.Add(new VbProperty("SummaryTable", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("SummaryTable", "getNextRow", "(iterator As ITableIterator, out row As SummaryTableRow)"));
                 coll.Add(new VbProperty("SummaryTable", "getNextRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row as SummaryTableRow)"));
                 coll.Add(new VbProperty("SummaryTable", "findRow", "(id As String, out row As SummaryTableRow)"));
                 coll.Add(new VbProperty("SummaryTable", "getStatus", "()"));
                 coll.Add(new VbProperty("SummaryTable", "forEachRow", "(eachRowListener As IEachRowListener)"));
                 coll.Add(new VbProperty("SummaryTable", "isCellChanged", "(row As Integer, column As Integer)"));
                 coll.Add(new VbProperty("SummaryTable", "getNextGenericRow", "(iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("SummaryTable", "getNextGenericRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("SummaryTable", "subscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("SummaryTable", "unsubscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("SummaryTable", "subscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("SummaryTable", "unsubscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("SummaryTableRow", "OfferID"));
                 coll.Add(new VbProperty("SummaryTableRow", "DefaultSortOrder"));
                 coll.Add(new VbProperty("SummaryTableRow", "Instrument"));
                 coll.Add(new VbProperty("SummaryTableRow", "SellNetPL"));
                 coll.Add(new VbProperty("SummaryTableRow", "SellAmount"));
                 coll.Add(new VbProperty("SummaryTableRow", "SellAvgOpen"));
                 coll.Add(new VbProperty("SummaryTableRow", "BuyClose"));
                 coll.Add(new VbProperty("SummaryTableRow", "SellClose"));
                 coll.Add(new VbProperty("SummaryTableRow", "BuyAvgOpen"));
                 coll.Add(new VbProperty("SummaryTableRow", "BuyAmount"));
                 coll.Add(new VbProperty("SummaryTableRow", "BuyNetPL"));
                 coll.Add(new VbProperty("SummaryTableRow", "Amount"));
                 coll.Add(new VbProperty("SummaryTableRow", "GrossPL"));
                 coll.Add(new VbProperty("SummaryTableRow", "NetPL"));
                 coll.Add(new VbProperty("SummaryTableRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("SummaryTableRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("SummaryTableRow", "TableType"));
                 coll.Add(new VbProperty("SummaryTableRow", "Columns", "()"));
                 coll.Add(new VbProperty("Table", "getStatus", "()"));
                 coll.Add(new VbProperty("Table", "forEachRow", "(eachRowListener As IEachRowListener)"));
                 coll.Add(new VbProperty("Table", "isCellChanged", "(row As Integer, column As Integer)"));
                 coll.Add(new VbProperty("Table", "getNextGenericRow", "(iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("Table", "getNextGenericRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("Table", "subscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("Table", "unsubscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("Table", "subscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("Table", "unsubscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("TradeRow", "TradeID"));
                 coll.Add(new VbProperty("TradeRow", "AccountID"));
                 coll.Add(new VbProperty("TradeRow", "AccountName"));
                 coll.Add(new VbProperty("TradeRow", "AccountKind"));
                 coll.Add(new VbProperty("TradeRow", "OfferID"));
                 coll.Add(new VbProperty("TradeRow", "Amount"));
                 coll.Add(new VbProperty("TradeRow", "BuySell"));
                 coll.Add(new VbProperty("TradeRow", "OpenRate"));
                 coll.Add(new VbProperty("TradeRow", "OpenTime"));
                 coll.Add(new VbProperty("TradeRow", "OpenQuoteID"));
                 coll.Add(new VbProperty("TradeRow", "OpenOrderID"));
                 coll.Add(new VbProperty("TradeRow", "OpenOrderReqID"));
                 coll.Add(new VbProperty("TradeRow", "OpenOrderRequestTXT"));
                 coll.Add(new VbProperty("TradeRow", "Commission"));
                 coll.Add(new VbProperty("TradeRow", "RolloverInterest"));
                 coll.Add(new VbProperty("TradeRow", "TradeIDOrigin"));
                 coll.Add(new VbProperty("TradeRow", "UsedMargin"));
                 coll.Add(new VbProperty("TradeRow", "ValueDate"));
                 coll.Add(new VbProperty("TradeRow", "Parties"));
                 coll.Add(new VbProperty("TradeRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("TradeRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("TradeRow", "TableType"));
                 coll.Add(new VbProperty("TradeRow", "Columns", "()"));
                 coll.Add(new VbProperty("TradesTable", "getRow", "(iIndex As Integer)"));
                 coll.Add(new VbProperty("TradesTable", "getNextRow", "(iterator ITableIterator, out row As TradeTableRow)"));
                 coll.Add(new VbProperty("TradesTable", "getNextRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As TradeTableRow)"));
                 coll.Add(new VbProperty("TradesTable", "findRow", "(id As String, row As TradeTableRow)"));
                 coll.Add(new VbProperty("TradesTable", "getStatus", "()"));
                 coll.Add(new VbProperty("TradesTable", "forEachRow", "(eachRowListener As IEachRowListener)"));
                 coll.Add(new VbProperty("TradesTable", "isCellChanged", "(row As Integer, column As Integer)"));
                 coll.Add(new VbProperty("TradesTable", "getNextGenericRow", "(iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("TradesTable", "getNextGenericRowByColumnValue", "(columnId As String, columnValue As Object, iterator As ITableIterator, out row As Row)"));
                 coll.Add(new VbProperty("TradesTable", "subscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("TradesTable", "unsubscribeUpdate", "(updateType As TableUpdateType, listener As ITableListener)"));
                 coll.Add(new VbProperty("TradesTable", "subscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("TradesTable", "unsubscribeStatus", "(listener As ITableListener)"));
                 coll.Add(new VbProperty("TradeTableRow", "PL"));
                 coll.Add(new VbProperty("TradeTableRow", "GrossPL"));
                 coll.Add(new VbProperty("TradeTableRow", "Close"));
                 coll.Add(new VbProperty("TradeTableRow", "Stop"));
                 coll.Add(new VbProperty("TradeTableRow", "Limit"));
                 coll.Add(new VbProperty("TradeTableRow", "TradeID"));
                 coll.Add(new VbProperty("TradeTableRow", "AccountID"));
                 coll.Add(new VbProperty("TradeTableRow", "AccountName"));
                 coll.Add(new VbProperty("TradeTableRow", "AccountKind"));
                 coll.Add(new VbProperty("TradeTableRow", "OfferID"));
                 coll.Add(new VbProperty("TradeTableRow", "Amount"));
                 coll.Add(new VbProperty("TradeTableRow", "BuySell"));
                 coll.Add(new VbProperty("TradeTableRow", "OpenRate"));
                 coll.Add(new VbProperty("TradeTableRow", "OpenTime"));
                 coll.Add(new VbProperty("TradeTableRow", "OpenQuoteID"));
                 coll.Add(new VbProperty("TradeTableRow", "OpenOrderID"));
                 coll.Add(new VbProperty("TradeTableRow", "OpenOrderReqID"));
                 coll.Add(new VbProperty("TradeTableRow", "OpenOrderRequestTXT"));
                 coll.Add(new VbProperty("TradeTableRow", "Commission"));
                 coll.Add(new VbProperty("TradeTableRow", "RolloverInterest"));
                 coll.Add(new VbProperty("TradeTableRow", "TradeIDOrigin"));
                 coll.Add(new VbProperty("TradeTableRow", "UsedMargin"));
                 coll.Add(new VbProperty("TradeTableRow", "ValueDate"));
                 coll.Add(new VbProperty("TradeTableRow", "Parties"));
                 coll.Add(new VbProperty("TradeTableRow", "getCell", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("TradeTableRow", "isCellChanged", "(iColumn As Integer)"));
                 coll.Add(new VbProperty("TradeTableRow", "TableType"));
                 coll.Add(new VbProperty("TradeTableRow", "Columns", "()"));
                 coll.Add(new VbProperty("Transport", "createSession", "()"));
                 coll.Add(new VbProperty("Transport", "setProxy", "(host As String, port As Integer, user As String, password As String)"));
                 coll.Add(new VbProperty("Transport", "setNumberOfReconnections", "(Number As Integer)"));
            }
            return coll;
        }
    }
}