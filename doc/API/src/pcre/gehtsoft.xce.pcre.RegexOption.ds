@class
    @name=RegexOption
    @key=gehtsoft.xce.pcre.RegexOption
    @brief=The regular expression options.
    @type=enum
    @ingroup=gehtsoft.xce.pcre
    @sig=T:gehtsoft.xce.pcre.RegexOption

    @member
        @name=Ucp
        @sig=F:gehtsoft.xce.pcre.RegexOption.Ucp
        @key=Ucp.0
        @divisor=.
        @brief=Forces Unicode character classification instead of ASCII.
        @visibility=public
        @scope=class
        @type=field
       
        This option changes the way PCRE processes \B, \b, \D, \d, \S, \s, \W,
        \w, and some of the POSIX character classes.  By default,  only ASCII
        characters are recognized, but if [c]RegexOption.Ucp[/c] is set, Unicode properties
        are used instead to classify characters. More details are given in the
        section on generic character types in the pcrepattern page. If you set
        [c]RegexOption.Ucp[/c], matching one of the items it affects takes much longer.  
    @end


    @member
        @name=NoStartOptimize
        @sig=F:gehtsoft.xce.pcre.RegexOption.NoStartOptimize
        @key=NoStartOptimize.0
        @divisor=.
        @brief=Disables the optimization during compilation of the expression.
        @visibility=public
        @scope=class
        @type=field
       There are a number of optimizations that PCRE uses at the start
       of a match, in order to speed up the process. For example,  if it is
       known that an unanchored match must start with a specific character, it
       searches the subject for that character, and fails immediately if it
       cannot find it,  without actually running the main matching function.
       This means that a special item such as (*COMMIT) at the start of a pattern is not considered until after a suitable starting point for the
       match has been found. When callouts or (*MARK) items are in use,  these
       "start-up" optimizations can cause them to be skipped if the pattern is
       never actually used. The start-up optimizations are in effect a  prescan of the subject that takes place before the pattern is run.

       The  [c]RegexOption.NoStartOptimize[/c] option disables the start-up optimizations,
       possibly causing performance to suffer,  but ensuring that in cases
       where the result is "no match", the callouts do occur, and that items
       such as (*COMMIT) and (*MARK) are considered at every possible starting
       position in the subject string. If [c]RegexOption.NoStartOptimize[/c] is set at
       compile time, it cannot be unset at matching time.

       Setting [c]RegexOption.NoStartOptimize[/c] can change the outcome of a  matching
       operation.  Consider the pattern

       (*COMMIT)ABC

       When this is compiled, PCRE records the fact that a match must start
       with the character "A". Suppose the subject string is  "DEFABC".  The
       start-up optimization scans along the subject, finds "A" and runs the
       first match attempt from there. The (*COMMIT) item means that the pattern must match the current starting position, which in this case, it
       does. However, if the same match is run with [c]RegexOption.NoStartOptimize[/c]
       set,  the initial scan along the subject string does not happen. The
       first match attempt is run starting from  "D"  and when this fails,
       (*COMMIT)  prevents any further matches being tried, so the overall
       result is "no match". If the pattern is studied,  more start-up optimizations  
       may be used. For example, a minimum length for the subject
       may be recorded. Consider the pattern

         (*MARK:A)(X|Y)

       The minimum length for a match is one character.  If the subject is
       "ABC",  there will be attempts to match "ABC", "BC", "C", and then
       finally an empty string.  If the pattern is studied, the final attempt
       does not take place, because PCRE knows that the subject is too short,
       and so the (*MARK) is never encountered.  In this case,  studying the
       pattern does not affect the overall match result, which is still "no
       match", but it does affect the auxiliary information that is returned.

    @end


    @member
        @name=JavaScriptCompatible
        @sig=F:gehtsoft.xce.pcre.RegexOption.JavaScriptCompatible
        @key=JavaScriptCompatible.0
        @divisor=.
        @brief=Forces JavaScript compatible syntax.
        @visibility=public
        @scope=class
        @type=field

       If this option is set, PCRE's behaviour is changed in some ways so that
       it is compatible with JavaScript rather than Perl. The changes are as
       follows:

       (1) A lone closing square bracket in a pattern causes a  compile-time
       error,  because this is illegal in JavaScript (by default it is treated
       as a data character). Thus, the pattern AB]CD becomes illegal when this
       option is set.

       (2)  At run time, a back reference to an unset subpattern group matches
       an empty string (by default this causes the current matching alternative to fail). A pattern such as (\1)(a) succeeds when this option is
       set (assuming it can find an "a" in the subject), whereas it fails by
       default, for Perl compatibility.
    @end


    @member
        @name=BsrUnicode
        @sig=F:gehtsoft.xce.pcre.RegexOption.BsrUnicode
        @key=BsrUnicode.0
        @divisor=.
        @brief=Manages \R pattern character recognition.
        @visibility=public
        @scope=class
        @type=field
       
       This option control what the \R escape
       sequence matches. The choice is either to match only CR, LF,  or CRLF,
       or to match any Unicode newline sequence. These options override the
       choice that was made or defaulted when the pattern was compiled.

        Cannot be used together with [c]RegexOption.BsrAnyCrLf[/c]

    @end


    @member
        @name=BsrAnyCrLf
        @sig=F:gehtsoft.xce.pcre.RegexOption.BsrAnyCrLf
        @key=BsrAnyCrLf.0
        @divisor=.
        @brief=Manages \R pattern character recognition.
        @visibility=public
        @scope=class
        @type=field

       This option control what the \R escape
       sequence matches. The choice is either to match only CR, LF,  or CRLF,
       or to match any Unicode newline sequence. These options override the
       choice that was made or defaulted when the pattern was compiled.

       Cannot be used together with [c]RegexOption.BsrUnicode[/c]

    @end


    @member
        @name=NewLineAnyCrLf
        @sig=F:gehtsoft.xce.pcre.RegexOption.NewLineAnyCrLf
        @key=NewLineAnyCrLf.0
        @divisor=.
        @brief=Manages EOL character recognition.
        @visibility=public
        @scope=class
        @type=field
       
        This option override the newline definition that was chosen or
        defaulted when the pattern was compiled.

       During matching,  the newline choice
       affects the behaviour of the dot, circumflex, and dollar metacharacters. It may also alter the
       way the match position is advanced after a
       match failure for an unanchored pattern.

       When  [c]RegexOption.NewLineCrLf[/c], [c]RegexOption.NewLineAny[/c],  or [c]RegexOption.NewLineAnyCrLf[/c] is
       set, and a match attempt for an unanchored pattern fails when the current position is at a  CRLF sequence,  and the pattern contains no
       explicit matches for CR or LF characters,  the match position is
       advanced by two characters instead of one, in other words, to after the
       CRLF.

       The above rule is a compromise that makes the most common cases work as
       expected.  For example,  if the pattern is .+A (and the [c]RegexOption.DotAll[/c]
       option is not set), it does not match the string "\r\nA" because, after
       failing at the start, it skips both the CR and the LF before retrying.
       However, the pattern [\r\n]A does match that string,  because it contains an explicit CR or LF reference, and so advances 
       only by one character after the first failure.

       An explicit match for CR of LF is either a literal appearance of one of
       those characters,  or one of the \r or \n escape sequences. Implicit
       matches such as [^X] do not count, nor does \s (which includes CR and
       LF in the characters that it matches).

       Notwithstanding the above, anomalous effects may still occur when CRLF
       is a valid newline sequence and explicit \r or \n escapes appear in the
       pattern.
    @end


    @member
        @name=NewLineAny
        @sig=F:gehtsoft.xce.pcre.RegexOption.NewLineAny
        @key=NewLineAny.0
        @divisor=.
        @brief=Manages EOL character recognition.
        @visibility=public
        @scope=class
        @type=field

        See [clink=gehtsoft.xce.pcre.RegexOption.NewLineAnyCrLf.0]RegexOption.NewLineAnyCrLf[/clink] for details.
    @end


    @member
        @name=NewLineCrLf
        @sig=F:gehtsoft.xce.pcre.RegexOption.NewLineCrLf
        @key=NewLineCrLf.0
        @divisor=.
        @brief=Manages EOL character recognition.
        @visibility=public
        @scope=class
        @type=field
        See [clink=gehtsoft.xce.pcre.RegexOption.NewLineAnyCrLf.0]RegexOption.NewLineAnyCrLf[/clink] for details.

    @end


    @member
        @name=NewLineLf
        @sig=F:gehtsoft.xce.pcre.RegexOption.NewLineLf
        @key=NewLineLf.0
        @divisor=.
        @brief=Manages EOL character recognition.
        @visibility=public
        @scope=class
        @type=field
        See [clink=gehtsoft.xce.pcre.RegexOption.NewLineAnyCrLf.0]RegexOption.NewLineAnyCrLf[/clink] for details.

    @end


    @member
        @name=NewLineCr
        @sig=F:gehtsoft.xce.pcre.RegexOption.NewLineCr
        @key=NewLineCr.0
        @divisor=.
        @brief=Manages EOL character recognition.
        @visibility=public
        @scope=class
        @type=field
        See [clink=gehtsoft.xce.pcre.RegexOption.NewLineAnyCrLf.0]RegexOption.NewLineAnyCrLf[/clink] for details.

    @end


    @member
        @name=DupNames
        @sig=F:gehtsoft.xce.pcre.RegexOption.DupNames
        @key=DupNames.0
        @divisor=.
        @brief=Allows duplicate group names. 
        @visibility=public
        @scope=class
        @type=field
        If this bit is set, names used to identify capturing subpatterns need
        not be unique. This can be helpful for certain types of pattern when it
        is known that only one instance of the named subpattern can ever be
        matched.  
    @end


    @member
        @name=FirstLine
        @sig=F:gehtsoft.xce.pcre.RegexOption.FirstLine
        @key=FirstLine.0
        @divisor=.
        @brief=Limits matching to the first line only. 
        @visibility=public
        @scope=class
        @type=field
         If this option is set, an unanchored pattern is required to match
       before or at the first newline in the subject string, though the
       matched text may continue over the newline.

    @end


    @member
        @name=NoAutoCapture
        @sig=F:gehtsoft.xce.pcre.RegexOption.NoAutoCapture
        @key=NoAutoCapture.0
        @divisor=.
        @brief=Disables the user of numbered capturing parentheses.
        @visibility=public
        @scope=class
        @type=field
       If this option is set, it disables the use of numbered capturing parentheses in the pattern. Any opening parenthesis that is 
       not followed by ?  behaves as if it were followed by ?: but named parentheses can still
       be used for capturing (and they acquire numbers in the usual way).
       There is no equivalent of this option in Perl.
    @end


    @member
        @name=Ungreedy
        @sig=F:gehtsoft.xce.pcre.RegexOption.Ungreedy
        @key=Ungreedy.0
        @divisor=.
        @brief=Inverts the greediness of the qualifiers.
        @visibility=public
        @scope=class
        @type=field

        This option inverts the "greediness" of the quantifiers so that they
       are not greedy by default, but become greedy if followed by "?". It is
       not compatible with Perl. It can also be set by a (?U)  option setting
       within the pattern.


    @end


    @member
        @name=Extra
        @sig=F:gehtsoft.xce.pcre.RegexOption.Extra
        @key=Extra.0
        @divisor=.
        @brief=Turns PCRE extensions on.
        @visibility=public
        @scope=class
        @type=field

       This option was invented in order to turn on additional functionality
       of PCRE that is incompatible with Perl, but it is currently of very
       little use. When set, any backslash in a pattern that is followed by a
       letter that has no special meaning causes an error,  thus reserving
       these combinations for future expansion.  By default, as in Perl, a
       backslash followed by a letter with no special meaning is treated as a
       literal. (Perl can, however, be persuaded to give an error for this, by
       running it with the -w option.) There are at present no other features
       controlled by this option. It can also be set by a (?X) option setting
       within a pattern.

    @end


    @member
        @name=DollarEndOnly
        @sig=F:gehtsoft.xce.pcre.RegexOption.DollarEndOnly
        @key=DollarEndOnly.0
        @divisor=.
        @brief=Makes $ pattern matching the end of the text only.
        @visibility=public
        @scope=class
        @type=field
        If this bit is set, a dollar metacharacter in the pattern matches only
        at the end of the subject string. Without this option, a dollar also
        matches immediately before a newline at the end of the string (but not
        before any other newlines). The option is ignored
        if [c]RegexOption.Multiline[/c] is set.
    @end


    @member
        @name=Anchored
        @sig=F:gehtsoft.xce.pcre.RegexOption.Anchored
        @key=Anchored.0
        @divisor=.
        @brief=Makes the matches limited to the first position.
        @visibility=public
        @scope=class
        @type=field

       The option limits to matching at the first
       matching position.  If a  pattern was compiled with the option, or
       turned out to be anchored by virtue of its contents, it cannot be made
       unachored at matching time.
    @end



    @member
        @name=Extended
        @sig=F:gehtsoft.xce.pcre.RegexOption.Extended
        @key=Extended.0
        @divisor=.
        @brief=Makes the compiler ignore the spaces in the regular expression.. 
        @visibility=public
        @scope=class
        @type=field

       If this bit is set, whitespace data characters in the pattern are
       totally ignored except when escaped or inside a character class. Whitespace does not include the VT character (code 11). In addition, characters between an unescaped # outside a character class and the next newline, inclusive, are also ignored. This is equivalent to Perl's  /x
       option,  and it can be changed within a pattern by a (?x) option setting.

       Which characters are interpreted as newlines is controlled by the
       options passed to compile or by a special sequence at the start
       of the pattern, as described in the section entitled  "Newline conventions" in the pcrepattern documentation. Note that the end of this type
       of comment is a  literal newline sequence in the pattern;  escape
       sequences that happen to represent a newline do not count.

       This option makes it possible to include comments inside complicated
       patterns.  Note, however, that this applies only to data characters.
       Whitespace characters may never appear within special character
       sequences in a pattern, for example within the sequence (?( that introduces a conditional subpattern.
    @end


    @member
        @name=DotAll
        @sig=F:gehtsoft.xce.pcre.RegexOption.DotAll
        @key=DotAll.0
        @divisor=.
        @brief=Makes dot matching EOL.
        @visibility=public
        @scope=class
        @type=field
       If this bit is set, a dot metacharacter in the pattern matches a character of any value, including one that indicates a newline. However, it
       only ever matches one character, even if newlines are coded as CRLF.
       Without this option, a dot does not match when the current position is
       at a newline. This option is equivalent to Perl's /s option, and it can
       be changed within a pattern by a (?s) option setting. A negative class
       such as [^a] always matches newline characters, independent of the setting of this option.

    @end


    @member
        @name=MultiLine
        @sig=F:gehtsoft.xce.pcre.RegexOption.MultiLine
        @key=MultiLine.0
        @divisor=.
        @brief=Makes the ^ and $ pattern match the EOL characters.
        @visibility=public
        @scope=class
        @type=field
        By default,  PCRE treats the subject string as consisting of a single
       line of characters (even if it actually contains newlines). The  "start
       of line"  metacharacter  (^)  matches only at the start of the string,
       while the "end of line" metacharacter ($) matches only at the end of
       the string, or before a terminating newline (unless [c]RegexOption.DollarEndOnly[/c]
       is set). This is the same as Perl.

       When the option is set, the "start of line" and  "end of line"
       constructs match immediately following or immediately before internal
       newlines in the subject string, respectively, as well as at the very
       start and end.  This is equivalent to Perl's /m option, and it can be
       changed within a pattern by a (?m) option setting. If there are no newlines in a  subject string, or no occurrences of ^ or $ in a pattern,
       setting the option has no effect.

    @end


    @member
        @name=Caseless
        @sig=F:gehtsoft.xce.pcre.RegexOption.Caseless
        @key=Caseless.0
        @divisor=.
        @brief=Makes the regular expression caseless.
        @visibility=public
        @scope=class
        @type=field

        If this bit is set, letters in the pattern match both upper and lower
       case letters. It is equivalent to Perl's  /i option,  and it can be
       changed within a pattern by a (?i) option setting. In UTF-8 mode, PCRE
       always understands the concept of case for characters whose values are
       less than 128, so caseless matching is always possible. For characters
       with higher values, the concept of case is supported if PCRE is compiled with Unicode property support, but not otherwise. 
    @end


    @member
        @name=None
        @sig=F:gehtsoft.xce.pcre.RegexOption.None
        @key=None.0
        @divisor=.
        @brief=No options
        @visibility=public
        @scope=class
        @type=field

    @end

    The type defined in the [c]gehtsoft.xce.pcre.dll[/c] assembly.
    The namespace is [clink=gehtsoft.xce.pcre]gehtsoft.xce.pcre[/clink].
@end

